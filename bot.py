import logging
import os
from telegram import (
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardMarkup
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ConversationHandler
)

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# üîê –ó–∞–º–µ–Ω–∏—Ç–µ —Ç–æ–∫–µ–Ω –∏ chat_id –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
TOKEN = "7834653995:AAELsH-lEvlhg_XnmNTEUH0DhJXlFMUDEB8"  # –õ—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID", "5598142824"))  # ‚Üê –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π chat_id

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu_keyboard = [
    ["üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "‚úç –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"],
    ["‚Ñπ –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã"]
]
main_menu = ReplyKeyboardMarkup(main_menu_keyboard, resize_keyboard=True)
back_keyboard = ReplyKeyboardMarkup([["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]], resize_keyboard=True)

# –°–æ—Å—Ç–æ—è–Ω–∏—è
ASK_QUESTION = 1

# –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã
faq_data = {
    "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π": "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π: https://schedule.kantiana.ru/",
    "–†–∞—Å–ø–∏—Å–∞–Ω–∏ —Å–µ—Å—Å–∏–∏": "üìù –≠–∫–∑–∞–º–µ–Ω—ã –∏ –∑–∞—á—ë—Ç—ã: https://schedule.kantiana.ru/",
    "–û—à–∏–±–∫–∞ –≤ –≤–µ–¥–æ–º–æ—Å—Ç–∏": "üìå –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é, –∫—É—Ä–∞—Ç–æ—Ä—É, —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é –û–ü –∏–ª–∏ –¥–µ–ª–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—é.",
    "–ù–∞–π—Ç–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è": "üë©‚Äçüè´ –ù–∞–π—Ç–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è: https://schedule.kantiana.ru/teachers –∏–ª–∏ –ø–æ –ø–æ—á—Ç–µ kantiana.ru. –¢–∞–∫–∂–µ —Å–º–æ—Ç—Ä–∏—Ç–µ –≥—Ä–∞—Ñ–∏–∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –ø–æ –∞–¥—Ä–µ—Å—É: –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥, —É–ª. –ù–µ–≤—Å–∫–æ–≥–æ, 14 –í, 2 —ç—Ç–∞–∂.",
    "–ö–æ–≥–¥–∞ –∫–∞–Ω–∏–∫—É–ª—ã": "üéâ –ì—Ä–∞—Ñ–∏–∫ –∫–∞–Ω–∏–∫—É–ª: https://kantiana.ru/vikon/sveden/files/zix/Grafiki_uchebnogo_processa_obrazovatelynyx_programm_VO_na_2024-2025_uchebnyi_god_podpisy.pdf",
    "–°–ø—Ä–∞–≤–∫–∞ –æ–± —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏": "üìÑ –°–ø—Ä–∞–≤–∫–∞ –æ–± —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏: —á–µ—Ä–µ–∑ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –∏–ª–∏ –≤ –ú–§–¶ (–ù–µ–≤—Å–∫–æ–≥–æ, 14, 1 —ç—Ç–∞–∂).",
    "–£—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å": "üìä –£—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å: –≤ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –∑–∞—á—ë—Ç–∫–µ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ —Å—Ç—É–¥–µ–Ω—Ç–∞.",
    "–ü–æ—Ä—è–¥–æ–∫ –æ—Ç—á–∏—Å–ª–µ–Ω–∏—è": "‚ùó –ü–æ–¥—Ä–æ–±–Ω–µ–µ: https://kantiana.ru/vikon/sveden/files/riq/Polozhenie-o-perevode-vnutri-vuza-otch-i-vosst-27_11_2024.pdf",
    "–î–æ—Å—Ç—É–ø –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç": "üîê –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç: IT-–æ—Ç–¥–µ–ª, –ù–µ–≤—Å–∫–æ–≥–æ, 14, –∫–∞–±. 112."
}

# –ö–æ–º–∞–Ω–¥—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {update.effective_user.first_name}! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ —Å—Ç—É–¥–µ–Ω—Ç–∞.\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –∏–∑ –º–µ–Ω—é:",
        reply_markup=main_menu
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/start ‚Äî –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n/faq ‚Äî –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n/raspisanie ‚Äî –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"
    )

async def raspisanie(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π: https://schedule.kantiana.ru/")

# –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã
async def faq(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton(key.capitalize(), callback_data=f"faq:{key}")]
        for key in faq_data
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –û–î–ù–û —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:", reply_markup=reply_markup)

	# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ FAQ-–∫–Ω–æ–ø–∫—É
async def handle_faq_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    key = query.data.split(":")[1]
    response = faq_data.get(key, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π ‚Äî —Ç–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç inline
    await query.edit_message_text(text=response)

   
# –ù–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
ASK_GROUP_QUESTION, ASK_NAME_QUESTION, ASK_TEXT_QUESTION = range(3)

# –ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ ‚Äî —Å–Ω–∞—á–∞–ª–∞ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –≥—Ä—É–ø–ø—É
async def ask_question_entry(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üìå –£–∫–∞–∂–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É:", reply_markup=back_keyboard)
    return ASK_GROUP_QUESTION

# –ü–æ–ª—É—á–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É –§–ò–û
async def ask_question_group(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["group"] = update.message.text.strip()
    await update.message.reply_text("üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é, –∏–º—è, –æ—Ç—á–µ—Å—Ç–≤–æ:")
    return ASK_NAME_QUESTION

# –ü–æ–ª—É—á–µ–Ω–∏–µ –§–ò–û, –∑–∞—Ç–µ–º –ø—Ä–æ—Å–∏–º –∑–∞–¥–∞—Ç—å —Å–∞–º –≤–æ–ø—Ä–æ—Å
async def ask_question_fio(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["fio"] = update.message.text.strip()
    await update.message.reply_text("‚úç –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å. –ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ:")
    return ASK_TEXT_QUESTION

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω—É
async def receive_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    question = update.message.text.strip()

    if not question:
        await update.message.reply_text("‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞.")
        return ASK_TEXT_QUESTION

    group = context.user_data.get("group", "‚Äî")
    fio = context.user_data.get("fio", "‚Äî")

    admin_message = (
        f"üì© –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç @{user.username or user.first_name} (ID: {user.id}):\n"
        f"üë§ –§–ò–û: {fio}\n"
        f"üìö –ì—Ä—É–ø–ø–∞: {group}\n\n"
        f"‚ùì –í–æ–ø—Ä–æ—Å:\n{question}"
    )
    try:
        await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=admin_message)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")

    await update.message.reply_text("‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.", reply_markup=main_menu)
    return ConversationHandler.END


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é
async def handle_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()

    if text == "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
        await raspisanie(update, context)
    elif text == "‚Ñπ –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã":
        await faq(update, context)
    elif text == "‚úç –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å":
        return await ask_question_entry(update, context)
    elif text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await start(update, context)
    else:
        await update.message.reply_text("ü§ñ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é.")

# –û—Ç–º–µ–Ω–∞ –≤–≤–æ–¥–∞
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –≤–≤–æ–¥. –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é.", reply_markup=main_menu)
    return ConversationHandler.END

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = ApplicationBuilder().token(TOKEN).build()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("faq", faq))
app.add_handler(CommandHandler("raspisanie", raspisanie))
app.add_handler(CallbackQueryHandler(handle_faq_click, pattern="^faq:"))

question_handler = ConversationHandler(
    entry_points=[MessageHandler(filters.Regex("^(‚úç –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å)$"), ask_question_entry)],
    states={
        ASK_GROUP_QUESTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_question_group)],
        ASK_NAME_QUESTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_question_fio)],
        ASK_TEXT_QUESTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_question)],
    },
    fallbacks=[MessageHandler(filters.Regex("^(üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é)$"), cancel)],
)


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
app.add_handler(question_handler)
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_menu))

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()
